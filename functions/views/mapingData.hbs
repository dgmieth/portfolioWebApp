<!-- ============================================================================================================================================= -->
<!--  *******     *******     *******     *******     *******     *******     *******     *******     *******     *******     *******     *******  -->
<!-- ============================================================================================================================================= -->
<!--- MARKET LIST APP -->
<b>Home view controller.</b> <i>(screenshoot 1 from left to right)</i> app's normal appearance and <i>(screenshoot 2 from left to right)</i> app's dark mode apperance.

<b>Market (Mercado) view controller.</b> <i>(screenshoot 1 from left to right)</i>: here the markets (stores) will be listed, but when there isn't any, the view controller shows a message instead. <i>(screenshoot 2 from left to right)</i>: user may add a new market(store) by clicking on the bottom right button <i>New Market (novo mercado)</i> and typing its name in the alert. <i>(screenshoot 3 from left to right)</i>: table view shows the newly added market together with any previously created one. <i>(screenshoot 4 from left to right)</i>: tapping on a cell calls the <i>didSelectRowAt</i> method. It shows an alert with three options: <i>Delete Marekt (delete mercado)</i>. <i>Edit Name (editar nome)</i> and <i>Cancel (cancelar)</i>

<b>Section (Setor) view controller.</b> <i>(screenshoot 1 from left to right)</i>: here the sections will be listed, but when there isn't any, the view controller shows a message instead. <i>(screenshoot 2 from left to right)</i>: user may add a new section by clicking on the bottom right button <i>New Section (novo setor)</i>, typing its name in the alert and choosing which market(store) it belongs to. <i>(screenshoot 3 from left to right)</i>: table view shows the newly added market together with any previously created one. Tapping on any cell calls the <i>didSelectRowAt</i> method. It shows an alert with four options: <i>Delete Section (delete setor)</i>. <i>Edit Name (editar nome)</i>, <i>Change market (alterar mercado)</i> and <i>Cancel (cancelar)</i>. <i>(screenshoot 4 from left to right)</i>: close up of alert to change the market (store) the section is related to. 

<b>General registry of Items (Cadastro Geral de Itens) view controller.</b> <i>(screenshoot 1 from left to right)</i>: itens are shown here, except if there isn't any saved yet, in which case the view controller shows a message instead. User may add items by clicking on the bottom right button <i>+</i>. <i>(screenshoot 2 from left to right)</i>: user will have to choose a market (store) and a section from the <i>pickerViews</i> respectively. The user may also add a market (store) and a section by choosing the last option among the <i>pickerView</i> options. <i>(screenshoot 3 and 4 from left to right)</i>: user will have to fill in the item's name (nome), brand -not required- (marca), choose a form of sale (Forma de Venda) from the <i>pickerView</i>, inform the price (preço). It is also possible to inform if the item needs refrigeration or not using the Item Refrigerated (item refrigerado) <i>switch</i> and to take a picture.  

<b>General registry of Items (Cadastro Geral de Itens) view controller.</b> <i>(screenshoot 1 from left to right)</i>: it shows the saved items collasped by market (store). <i>(screenshoot 2 from left to right)</i>: it shows the saved items collasped by section. <i>(screenshoot 3 from left to right)</i>: it shows the saved items. <i>(screenshoot 4 from left to right)</i>: tapping on any markets(store) or sections <i>tableViewCell</i> collapses/uncollapses that market(store)/section. Tapping on any item <i>tableViewCell</i> opens up the <i>Item Information (Informações do Item) view controller</i>.

<b>Item Information (Informações do Item) view controller.</b> <i>(screenshoot 1 from left to right)</i>: it shows the same information shown when the user was creating a new item, with two differences thoug: on top right corner, there is and <i>Edit (editar)</i> button and on the bottom left corner, a <i>Puchase History (histórico de compras)</i>. <i>(screenshoot 2 from left to right)</i>: upon clicking on the <i>Purchase History (histórico de compras)</i>, it shows the <i>Purchase History (histórico de compras) view controller</i> which shows how much and how many of that item was purchased ordered by date. If there isnt any information, the <i>tableView</i> shows an empty message instead. <i>(screenshoot 3 and 4 from left to right)</i>: the user may also edit the item information, by clicking on the <i>Edit (editar)</i> button. It is possible to change the market(store), the section, and any other information about the item. Under the <i>editing mode</i> the user may also delete the item by clicking on the <i>Delete (deletar)</i> button. 

<b>General registry of Items (Cadastro Geral de Itens) view controller.</b> <i>(screenshoot 1 from left to right)</i>: clicking on the righ hand side of the item cell, triggers the <i>didSelectRowAt</i> for adding the item to the week's shopping list. It shows an alert requiring the user to type how many/how much of that item is to be bought. <i>(screenshoot 2 from left to right)</i>: items added to the week's shopping list wil have be checked on the right hand side of the item <i>tableViewCell</i>.

<b>Week's Shopping List (lista semanal de compras) view controller.</b> <i>(screenshoot 1 and 2 from left to right)</i>: lists the items collapsed by markets(stores) and then by seciont. <i>(screenshoot 3 from left to right)</i>: clicking on the item <i>tableViewCell</i> triggers the <i>didSelectRowAt</i> method that shows four options: <i>Edit Price (editar preço)</i>, <i>Edit Quantity (editar quantidade)</i>, <i>Remove Item (remover item)</i> -removes the item from this week's list only- and <i>Cancel (cancelar)</i>. <i>(screenshoot 4 from left to right)</i>: screenshot shows the <i>Edit quantity</i>. Both <i>Edit Quantity</i> and <i>Edit Price</i> on this <i>view controller</i> help to easily update the quantity of the item to be bought on this list and the price of the item in the database respectively. 

<b>Week's Shopping List (lista semanal de compras) view controller.</b> <i>(screenshoot 1 from left to right)</i>: tapping on the right hand side of the item <i>tableViewCell</i> will mark it as <i>bought (checked)</i>. The <i>didSelectRowAt</i> method responsible for this checking action also triggers the function that updates the bottom left <i>lables</i> that inform the user how many of the totalily of items he/she has already purchased and how much that totality cost. <i>(screenshoot 2 from left to right)</i>:  in order to finish the list, the user has to click on the bottom right button <i>Finish List (finalizar lista)</i>. It will show an <i>alert</i> asking if the user really watns to finish the list. If user clicks on <i>Yes (sim)</i> the list is finished. All checked items will have its <i>purchase history</i> updated, all non purchased items will be unselected for this week's shopping list only. The list with all boght items will be saved to the <i>History of Finished Shopping List (Listas finalizadas de compras) view controller</i>.

<b>History of Finished Shopping List (Listas finalizadas de compras) view controller.</b> <i>(screenshoot 1 from left to right)</i>: shows a message the <i>view controller</i> shows where there isn't any list saved to the database. <i>(screenshoot 2 from left to right)</i>: shows the list collapsed by <i>conclusion date (concluída em ...)</i>. <i>(screenshoot 3 from left to right)</i>: uncollapsed list showing all items that list coantained.

<b>Purchase History (histórico de compras) view controller.</b> <i>(screenshoot 1 and 2 from left to right)</i>: they show an empty purchase history on the left and an item with a register of purchase on the right. This list will show a maxiomum of 20 registers per item. After that, only the 20 most recent registers will be shown. 

<b>Other screenshots.</b> <i>(screenshoot 1 and 2 from left to right)</i>: they show the difference between normal appearance and dark mode on the <i>General registry of Items (Cadastro Geral de Itens) view controller.</i> <i>(screenshoot 3 from left to right)</i>: close-up of the <i>Item photo (Foto item) view controller</i> available when clicking on the left hand side of the item <i>tableViewCell</i> in the <i>General registry of Items (Cadastro Geral de Itens) view controller</i> and <i>Week's Shopping List (lista semanal de compras) view controller</i>.

<b>Xcode screenshot:</b> close-up of the <i>formOfSale entity</i> of the <i>coreData</i>.

<b>Xcode screenshot:</b> close-up of the <i>singleItem controller class</i> of the <i>singleItem class</i> that are instantiated in the <i>Item Information (Informações do Item) view controller</i>.

<b>Xcode screenshot:</b> close-up of the app's story board.

<b>Xcode screenshot:</b> close-up of the app's customed item <i>tableViewCell</i>.

<p class="h5">Introduction</p>
<p class="card-p">Once I finished my graduation, I was fired up to create a mobile app. My first motivation was purely getting the <i>know-how</i> of creating an mobile. However, at the same moment I started thinking what my app would be about, I had this idea to create my own shopping list mobile app</p>
<p class="h5">Goals</p>
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>1st</i> get some practical experience with object oriented programming;</p>
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>2nd</i> get some practical experience with iOS mobile development</p>
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>3rd</i> create an app that would allow me release later versions with purchase items price and quantity statistics with the informaion contained in the database;</p>
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>4th</i> after an initial free version, release a premium version to start making some money;</p>
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>5th</i> have a picture of the item in case the user needs to buy the exact same one. Thus he/she may take a picture to have it right there on the list</p>
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>6th</i> retire my shopping list spreadshet.</p>
<p class="h5">View controllers</p>
<p class="h6"><u>Home view controller</u></p>
<p class="card-p">Contains the buttons to access the other five main view controller of this mobile app. </p>
<p class="h6"><u>Market view controller</u></p>
<p class="card-p">Allows users to register a new market, delete markets, edit a market's name. In <i>table view editing mode</i> after clicking on the <i>Edit (editar)</i> button, the user may switch the order the markets area shown. There is a function that reorders the market's locationId so that they will be ordered according to their locationId position.</p>
<p class="h6"><u>Section view controller</u></p>
<p class="card-p">Allows users to register a new section, delete sections, edit a section's name. While <i>All (todos)</i> is marked in the <i>UICollectionView</i>, all sections will be shown alphabetically ordered. The user, however, may tap on any other <i>UICollectionViewCell</i> which are markets, then only the sections of that market will be shown ordered by each one's locationId. Only wehn seen a specific market's sections, the <i>Edit (editar)</i> button will become visible so that the user may rearrage the order of the sections of that specific market. This reorder also updates the sections locationIds so that they will always be loaded from the <i>coreData</i> according to their locationId.</p>
<p class="h6"><u>General registry of items view controller</u></p>
<p class="card-p">This view controller shows all items in the database under its section and market, respectively. This view controller allows adding new items, seeing and item's photo, seeing an item's information and adding an items to this week's shopping list.</P> 
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>Adding a new item</i>.  The adding action calls <i>New Item (novo item) view controller</i> which allows the user to choose a market and a seciont, as well as inform the item's name, brand, form of sale, price, if it is a cold item or not and to take a picture of it. This <i>New Item view controller</i> also allows to create new markets and new sections within the markets.</p>
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>Seeing an item's photo</i>.  Tapping on the left hand side of the item's <i>tableViewCell</i> calls the  <i>Item photo (Foto item) view controller</i>.</p>
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>Seeing an item's info</i>.  Tapping on the middle of the item's <i>tableViewCell</i> calls the  <i>Item Information (Informações do Item) view controller</i>. In this view controller the user will see all the information of the item. He will be able to edit all its information as well as to delete the item. There is also a button that calls the <i>Purchase History (histórico de compras)</i> which shows the 20 most recent purchases of that item with the price paid and quantity bought.</p>
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>Adding an item to the shooping list</i>.  Tapping on the right hand side of the item's <i>tableViewCell</i> shows an alert that requires the user to inform how many/how much of that item is to be bought. By confirming, the item will be placed on that week's shooping list and a checkmark will appear on the right hand side of the <i>tableViewCell</i> of that item.</p> 
<p class="h6"><u>Week's Shopping List view controller</u></p>
<p class="card-p">This view controller shows all items added to the shopping list on the <i>General registry of items view controller</i>. This view controller also allows seeing and item's photo, editing an item's quantity to be bought or price, removing an item from this week's list and marking the item as bought. By clicking on the bottom right button <i>Finish List</i>, all marked as bought items will have today's price and quantity register to each one's purchase history and the for each marked as bought item will be created a <i>purchased item</i> which will be inserted into a <i>purchased list</i> object which will be shown in the <i>History of Finished Shopping List view controller</i>. Items that were not marked as bought on the <i>Week's Shopping List view controller</i> will just be removed from this week's shopping list.</p>
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>Seeing an item's photo</i>.  Tapping on the left hand side of the item's <i>tableViewCell</i> calls the  <i>Item photo (Foto item) view controller</i>.</p>
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>Editing an item's quantity to be bought or price</i>. Tapping on the middle of the item's <i>tableViewCell</i> shows an alert with some options. The first two are editing an item's price (it updates the price of the item in the database) and editing an item's quantity which will affect this week's shopping list only.</p>
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>Removing an item from this week's list</i>. Tapping on the middle of the item's <i>tableViewCell</i> shows an alert with some options. The last two are removing an item from the list (it removes the item only from this week's shoping list, that is, the item is unmarked as needed to buy) and cancelling the alert. 
<p class="card-p" style="margin-left: 20mm;text-indent: 0;"><i>Marking an item as bought</i>. Tapping on the right hand side of the item's <i>tableViewCell</i> marks is as an item already put in the shopping cart, that is a bought item. Bought items will show a checkmark on the right hand side of the <i>tableViewCell</i>.</p>
<p class="h6"><u>History of Finished Shopping List view controller</u></p>
<p class="card-p">Every time a list is finished in the <i>Week's Shooping List view controller</i>, for each of the marked-as-bought items a <i>purchase item</i> object will be created that will contain information of that item such as: name, price, quantity, form of sale, market and section. This <i>purchased item</i> will be inserted into a <i>purchased list</i> that contains information of the market and the date the week's list was finished. The view controller will show this <i>purchased list</i>s as headers, tapping on them will uncollapse them revealing all <i>purchased item</i>s inside.</p>
<p class="h5">Data objects</p>
<p class="card-p">The coreData contains <i>six data objects</i>: <i>Market</i>, <i>Section</i>, <i>Item</i>, <i>Form of Sale</i>, <i>Purchased Item</i> and <i>Purchase List</i>. The relation between the first three classes is the following. Every <i>Market</i> may have many <i>Sections</i> and this may have many <i>Item</i>s. Therefor, every <i>Item</i> relates to one <i>Section</i> only and this to one <i>Market</i> only.</p>
<p class="card-p">Every <i>Item</i> has as atributes: name, brand, is Refrigerated, photo, market and section and will have a object <i>Form of Sale</i> to deal with: how this item is sold (in singles packaged, kilos, litters, grams, kilograms), the price according to the how it is sold (i.e., if the item is sold in kilos, the price will be for 1 kilo of that item).</p>
<p class="card-p">The remaining two classes deal with the objects that are created once a week's shopping list in finished. Every time a week's shopping list is finished, for each item on that list is created a <i>Purchased Item</i> object which will be put into a <i>Purchased List</i> object. Thus, every <i>Purchased List </i> contains an array of <i>Purchased Items</i> and every <i>Purchased Item</i> relates to one <i>Purchase List</i> only.</p> 

<!-- ============================================================================================================================================= -->
<!--  *******     *******     *******     *******     *******     *******     *******     *******     *******     *******     *******     *******  -->
<!-- ============================================================================================================================================= -->
<!--- DASHBOARD SUBSIDIOS -->

<b>Main visulization.</b> In the first line of visualization it shows the total amount of service orders by aread (left graphic). In the middle, the total amount is divided by incoming, stock and finished. On the right hand side, the visualization shows which teams have more service orders by the size of that team's form. The second line of this visualization shows some metrics required by the client that requested this report. The last lines has one history of incoming service orders by area on the right hand side; on the left it's the history of finished service orders. 

<b>Spotfire's Data Panel.</b> It shows a <i>information link</i> to one of the tables as well as all tables used in this visualization can be seen at the dropdown list on the top right corner. 

<b>FTP screenshot.</b> It shows all .sas documents used to generate the data and migrate it from the SAS server to the MySQL server. 

<b>FTP screenshot.</b> It shows all the scripts that are run in the SAS server using the <i>crontab cli command</i>. The process to run scripts, generate date and migrate it is all automated and it runs every weekday in the early morning.  

<b>Filtered Visualization.</b> It shows the main visulization filtered for the <i>Credit (crédito)</i> area only. 

<b>Procedure MySQL.</b> This procedure is executed after the migration happens. It is responsible for updating the main data base of this report in the MySQL server. It inserts new service orders, check which ones where completed and changes the status of the ones that came in yesterday to stock or to finished, if the service order has been already finished. 
<!-- ============================================================================================================================================= -->
<!--  *******     *******     *******     *******     *******     *******     *******     *******     *******     *******     *******     *******  -->
<!-- ============================================================================================================================================= -->
<!--- MARKET LIST APP -->